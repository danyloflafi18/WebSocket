/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2019-04-21 20:09:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class main_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Title</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        .chatbox{\r\n");
      out.write("            display: none;\r\n");
      out.write("        }\r\n");
      out.write("        .messages{\r\n");
      out.write("            background-color: #369;\r\n");
      out.write("            width: 500px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        .messages .msg{\r\n");
      out.write("            background-color: #fff;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            margin-bottom: 10px;\r\n");
      out.write("            overflow: hidden;\r\n");
      out.write("        }\r\n");
      out.write("        .messages .msg .from{\r\n");
      out.write("            background-color: #396;\r\n");
      out.write("            line-height: 30px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: white;\r\n");
      out.write("        }\r\n");
      out.write("        .messages .msg .text{\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("        }\r\n");
      out.write("        textarea.msg{\r\n");
      out.write("            width: 540px;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            resize: none;\r\n");
      out.write("            border: none;\r\n");
      out.write("            box-shadow: 2px 2px 5px 0 inset;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script>\r\n");
      out.write("\r\n");
      out.write("        let chatUnit = {\r\n");
      out.write("            init(){\r\n");
      out.write("\r\n");
      out.write("                this.startbox = document.querySelector(\".start\");\r\n");
      out.write("                this.chatbox = document.querySelector(\".chatbox\");\r\n");
      out.write("\r\n");
      out.write("                this.startBtn = this.startbox.querySelector(\"button\");\r\n");
      out.write("                this.nameInput = this.startbox.querySelector(\"input\");\r\n");
      out.write("\r\n");
      out.write("                this.msgTextArea = this.chatbox.querySelector(\"textarea\");\r\n");
      out.write("                this.chatMessageContainer = this.querySelector(\".messages\");\r\n");
      out.write("                this.bindEvents();\r\n");
      out.write("            },\r\n");
      out.write("\r\n");
      out.write("            bindEvents(){\r\n");
      out.write("                this.startBtn.addEventListener(\"click\",e=>this.openSocket());\r\n");
      out.write("                this.msgTextArea.addEventListener(\"keyup\",e=>{\r\n");
      out.write("                    if(e.ctrlKey && e.keyCode===13){\r\n");
      out.write("                        e.preventDefault();\r\n");
      out.write("                        this.send();\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("            },\r\n");
      out.write("            send(){\r\n");
      out.write("               this.sendMessage({\r\n");
      out.write("                   name:this.name,\r\n");
      out.write("                   text:this.msgTextArea.value\r\n");
      out.write("               })\r\n");
      out.write("            },\r\n");
      out.write("\r\n");
      out.write("            onOpenSocket(){\r\n");
      out.write("\r\n");
      out.write("            },\r\n");
      out.write("\r\n");
      out.write("            onMessage(msg){\r\n");
      out.write("                let msgBlock = document.createElement(\"div\");\r\n");
      out.write("                msgBlock.className = \"msg\";\r\n");
      out.write("                let fromBlock = document.createElement(\"div\");\r\n");
      out.write("                fromBlock.className=\"form\";\r\n");
      out.write("                fromBlock.innerText=msg.name;\r\n");
      out.write("                let textBlock = document.createElement(\"div\");\r\n");
      out.write("                textBlock.className=\"text\";\r\n");
      out.write("                textBlock.innerText=msg.name;\r\n");
      out.write("\r\n");
      out.write("                msgBlock.appendChild(fromBlock);\r\n");
      out.write("                msgBlock.appendChild(textBlock);\r\n");
      out.write("                this.chatMessageContainer.appendChild(msgBlock);\r\n");
      out.write("            },\r\n");
      out.write("\r\n");
      out.write("            onClose(){\r\n");
      out.write("\r\n");
      out.write("            },\r\n");
      out.write("\r\n");
      out.write("            sendMessage(msg){\r\n");
      out.write("                this.onMessage({name:\"I'm\",text:msg:text});\r\n");
      out.write("                this.msgTextArea.value=\"\";\r\n");
      out.write("                this.ws.send(JSON.stringify(msg));\r\n");
      out.write("\r\n");
      out.write("            },\r\n");
      out.write("            openSocket(){\r\n");
      out.write("                this.ws = new WebSocket(\"ws://localhost:8080/sock/chat\");\r\n");
      out.write("                this.ws.onopen = ()=>this.onOpenSock();\r\n");
      out.write("                this.ws.onmessage = (e)=>this.onMessage(JSON.parse(e.data));\r\n");
      out.write("                this.ws.onclose = ()=>this.onClose();\r\n");
      out.write("\r\n");
      out.write("                this.name = this.nameInput.value;\r\n");
      out.write("                this.startbox.style.display=\"none\";\r\n");
      out.write("                this.chatbox.style.display=\"block\";\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        window.addEventListener(\"load\",e=>chatUnit.init());\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h1>ChatBox</h1>\r\n");
      out.write("<div class=\"start\">\r\n");
      out.write("    <input type=\"text\" class=\"username\" placeholder=\"enter name...\">\r\n");
      out.write("    <button id=\"start\">start</button>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"chatbox\">\r\n");
      out.write("    <div class=\"messages\">\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    <textarea class=\"msg\">\r\n");
      out.write("\r\n");
      out.write("    </textarea>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
